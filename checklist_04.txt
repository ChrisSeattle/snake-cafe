### Features & Process Checklist
branch: class-04-objects

Current Features and Goals for our Code:
- [ ] Create an Order class (for customer's order). Whatever means you were using to build orders before, replace them with methods and attributes belonging to this class.
- [ ] Every Order should have a uuid
- [ ] Every Order should have an add_item method that takes an item name and a quantity as arguments. There should be a default value for quantity if none is given.
- [ ] Every Order should have a remove_item method that takes an item name and a quantity as arguments. There should be a default value for quantity if none is given.
- [ ] Every Order should have a display_order() method that prints the user’s current order to the console
- [ ] Every Order should have a print_receipt() method that creates a file containing the text of the user’s full order. The file name should be of the format order-<the uuid>.txt and should have the same output as display_order
- [ ] All of the order input-checking that you used to do will be done by this class
- [ ] The repr of Order instances should look like <Order #ba99d8... | Items: 4 | Total: $754.23>
- [ ] When print() is called on an order instance, the user’s current order is printed as if display_order was called.
- [ ] When len() is called on an order instance, the number of items in the order is returned
- [ ] You may have as many helper methods as you want. However, make sure that any attributes and methods that aren’t intended for public use are prefixed with a single underscore
- [ ] All of your methods should be narrow in scope
- [ ] Testing: Every bit of functionality that you add should be tested.
- [ ] Testing: As a general rule at this time, you should have a test for valid, invalid, and edge case variants for every function that you define. There are exceptions. The exceptions are not the rule.
- [ ] (optional) Every menu category should have at least 12 items

General Process:
- [x] New branch as directed
- [x] directory, starter files, and general setup
- [x] Create an updated feature checklist to use at submission time
- [ ] Timestamp feature completions and notable update moments.
- [ ] Docstring to all functions in main and test files.
- [ ] Keep functions small, concise, and testable
- [ ] Update the readme file
- [ ] Update the checklist
- [ ] Create tests for all functionality of the program.
- [ ] Have tests for all functions except __name__ block, and simple prinout functions
- [ ] List out in words each test I intend to write
- [ ] If (when) I change my tests, update my test_plan.md file
- [ ] For each test, name the function or functions I intend to call and test

Previous Features and Goals:
- [?]  Ability to provide a seperate file as a menu with help text
- [x] Every menu category should have at least 9 items
- [x] Optional seperate menu is comma-seperated and saved as .csv
- [x] menu file: name (str), category (str), price (float), and quantity (int) referring to the in-stock amount of that item.
- [ ] alert user if inported file is not .csv file.
- [x] When user adds items to their order, they can also give a quantity, but if no quantity given, assume add 1
- [x] Alert user if they are attempting to order more than we have in stock.
- [x] Alert user if they try to remove or add an item not on current menu
- [x]  Alert user if they try to remove an item they don't have in their order
- [?]  Hide all traceback messages from user, including keyboard interupt

* Old Tests not Done Yet *
- [ ] Every order gets a universally unique identifier
- [ ] If user types remove <item>, remove 1 of the that <item> from their order
